#!/bin/bash
#
#Revision:2018110407
#

export PATH=/sbin:${PATH}

PROG_NAME=tacttyexec

INPUT=/dev/shm/${PROG_NAME}-input.$$
OUTPUT=/dev/shm/${PROG_NAME}-output.$$

# trap and delete temp files
trap "rm $OUTPUT; rm $INPUT; exit" SIGHUP SIGINT SIGTERM

CON_PORT=${1:-CON0}

#
# TACACS+ Accounting
#
TAC_CLIENT=/usr/local/bin/tacacs_client
function tac_accounting(){
	       $TAC_CLIENT -u $TAC_USERID -H $TAC_SERVER -k $TAC_KEY account -f $1 -c service=portex-tacmenu cmd=$2 cmdarg="$3 $4 $5 $6 $7" &>/dev/null 2>&1
}
tac_accounting start $PROG_NAME $CON_PORT 
#
# Purpose - display output using msgbox
#  $1 -> set msgbox height
#  $2 -> set msgbox width
#  $3 -> set msgbox title
#
function display_output(){
    local h=${1-10}        # box height default 10
    local w=${2-41}        # box width default 41
    local t=${3-Output}    # box title
    dialog --backtitle "SS Menu Output" --title "${t}" --clear --msgbox "$(<$OUTPUT)" ${h} ${w}
}

function get_pid(){
    local up=${1}
    local pid=""

    if [ "x${up}" != "x" ]
    then
        pid=$(ps -ef|grep "minicom ${up}"|grep -v grep|awk '{print $2}')
    fi

    # CAUTION!!! use echo here
    echo ${pid}
}
#
# Purpose - display a system info
#
function show_usb_console_info(){
    local up=${1}
    local pid=""

    if [ "x${up}" = "x" ]
    then
        echo "Error: Wrong Parameter." > $OUTPUT
        display_output 20 80 "USB Console Info ()"
    else
        ls -l /dev/${up} > $OUTPUT
        echo "--" >> $OUTPUT

        pid=$(get_pid ${up})
        if [ "x${pid}" = "x" ]
        then
            if [ -e /dev/${up} ]
            then
                echo "Port ${up} is available." >> $OUTPUT
            else
                echo "No device attached to port ${up}" >> $OUTPUT
            fi
        else
            echo "Port ${up} is being controlled by process ${pid}." >> $OUTPUT
            echo "If the process was stuck, use [reset] in previous menu to kill it." >> $OUTPUT
        fi

        display_output 20 80 "USB Console Info(${up})"
    fi
}
#
# set infinite loop
#
while true
do

    ### display main menu ###
    dialog --clear  --help-button --backtitle "MCSC SS USB CONSOLE for ${CON_PORT} HOSTNAME: $HOSTNAME" \
    --timeout 300 \
    --title "[ USB - CONSOLE - ${CON_PORT} ]" \
    --menu "Choose the TASK" 20 50 12 \
        "status"  "Display USB Console Status " \
        "connect" "Connect to ${CON_PORT}" \
        "reset"   "Reset ${CON_PORT}" \
        "setup"   "Setup ${CON_PORT}" \
        Exit "Back to USB CONSOLE" 2>"${INPUT}"

    _status=$?
    if [ ${_status} -eq 255 ]
    then
        # got dialog timeout
        exit 0
    fi

    menuitem=$(<"${INPUT}")

    # make decision
    case $menuitem in
        "status")
		tac_accounting start $PROG_NAME $CON_PORT show_usb_console_info 
		show_usb_console_info ${CON_PORT}
		tac_accounting stop $PROG_NAME $CON_PORT show_usb_console_info 
		;;
        "connect")
            # check if previous process controlling the port
            _pid=$(get_pid ${CON_PORT})
            if [ ! "x${_pid}" = "x" ]
            then
		tac_accounting update $PROG_NAME connect to occupied ${CON_PORT} failed
                echo "Warning:" > $OUTPUT
                echo "Port ${CON_PORT} is being controlled by process ${_pid}." >> $OUTPUT
                echo "If the process was stuck, use [reset] in previous menu to kill it." >> $OUTPUT
                display_output 20 80 "Trying to connect to port ${CON_PORT}..."
            else
                # port is available, try to connect to it
                if [ -e /dev/${CON_PORT} ]; then
			tac_accounting start $PROG_NAME connect to ${CON_PORT}
#			screen -wipe; screen -S ${CON_PORT}.$TAC_USERID minicom ${CON_PORT}
			tmux new -s ${CON_PORT}-$PORTEX_USERID-$$ minicom ${CON_PORT}\; unbind c
#			tmux new -s ${CON_PORT}-$TAC_USERID-$$ minicom ${CON_PORT}
			tac_accounting stop $PROG_NAME connect to ${CON_PORT}
		fi
            fi
            ;;
        "reset")
	    tac_accounting update $PROG_NAME reset console port ${CON_PORT}
            # find the pid of minicom process for specific usb port ${CON_PORT}
            # and then kill -HUP it to reset the process
            ps -ef \
                | grep "minicom ${CON_PORT}" \
                | grep -v grep \
                | awk '{print "kill -HUP ",$2}' \
                | sh
            ;;
        "setup") /usr/local/bin/tacttyset ${CON_PORT};;
        Exit)
		tac_accounting stop $PROG_NAME $CON_PORT 
		# if temp files found, delete em
		[ -f $OUTPUT ] && rm $OUTPUT
		[ -f $INPUT ] && rm $INPUT
		exit 0
		;;
    esac

done

